
const RAM_IS_BUSY = 0
const LOAD_REG = 1

const CACHE_ADDRESSES = LOAD_REG + 1
const CACHE_VALUES    = CACHE_ADDRESSES + 8

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    let destination = random(8)
    inputs[0] = 0 // load
    inputs[1] = 0 // store
    inputs[2] = random(0xffff) // address
    inputs[3] = random(0xffff) // value
    inputs[4] = 0 // Ram ready
    inputs[5] = destination
    inputs[6] = random(0xffff) // result_value

    if random(3) == 0 {

        inputs[2] = scratch_space[CACHE_ADDRESSES + random(8)]

    }

    let is_busy = scratch_space[RAM_IS_BUSY] == 1
    if !is_busy {

        if random(4) == 0 {

            if random(2) == 0 {

                inputs[0] = 1
                scratch_space[LOAD_REG] = destination

            } else {

                inputs[1] = 1

            }

            scratch_space[RAM_IS_BUSY] = 1

        }

    } else {

        let stop = random(10)
        
        if stop == 0 {
        
            scratch_space[RAM_IS_BUSY] = 0
            inputs[4] = 1
        
        }

    }

}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {
    
    let load    = inputs[0] == 1
    let store   = inputs[1] == 1
    let address = inputs[2]
    let value   = inputs[3]
    let ram_ready    = inputs[4] == 1
    let dest    = inputs[5]


    let offset = (address >> 2) & 0b111
    let cache_hit = load && scratch_space[CACHE_ADDRESSES + offset] == address

    if outputs[1] != inputs[1] {

        set_error(`The "Store" output should be the same as the input: {inputs[1]}.`)
        return fail

    }

    if outputs[2] != inputs[2] {

        set_error(`The output address should be the same as the input: {inputs[2]}.`)
        return fail

    }

    if outputs[3] != inputs[3] {

        set_error(`The "Value" output should be the same as the input: {inputs[3]}.`)
        return fail

    }

    if !load && outputs[0] == 1 {

        set_error(`Never output 1 to "Load" when the input "Load" is 0.`)
        return fail

    }

    if load {

        scratch_space[LOAD_REG] = dest

        if cache_hit {

            scratch_space[RAM_IS_BUSY] = 0

            if outputs[4] != 1 {

                set_error(`"Ram ready" should be 1, since we had a cache hit.`)
                return fail

            }

            if outputs[3] != value {

                set_error(`This should be a cache hit at cache {offset}, returning value {inputs[3]}.`)
                return fail

            }

            if outputs[0] == 1 {

                set_error(`"Load" output should be 0.`)
                return fail

            }

            if outputs[5] != dest {

                set_error(`"Destination" output should be {dest}.`)
                return fail

            }

        } else {

            if outputs[0] == 0 {

                set_error(`"Load" output should be 1 (we had a cache miss).`)
                return fail

            }

        }

    } elif ram_ready {

        if outputs[4] != 1 {

            set_error(`"Ram ready" should be the same as the input: 1.`)
            return fail

        }

        if outputs[5] != scratch_space[LOAD_REG] {

            set_error(`"Destination" output should be {scratch_space[LOAD_REG]}.`)
            return fail

        }

    }

    if store {

        scratch_space[LOAD_REG] = 0
        scratch_space[CACHE_ADDRESSES + offset] = address

    }

    if tick >= 0xfffff {

        if get_delay_score() >= 60 {

            set_error(`Your solution is correct, but delay should be less than 60.`)
            return fail

        }

        return win

    }

}

