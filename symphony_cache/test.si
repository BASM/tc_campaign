
const CURRENT_ADDRESS = 0
const CURRENT_VALUE = 8

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    let mode = random(3)

    inputs[0] = <Int> (mode == 0)
    inputs[1] = <Int> (mode == 1)
    inputs[2] = random(0xffff)
    inputs[3] = random(0xffff)

    if random(3) == 0 {

        inputs[2] = scratch_space[CURRENT_ADDRESS + random(8)]

    }

}


def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {

    let load = inputs[0] == 1
    let store = inputs[1] == 1
    let address = inputs[2]
    let offset  = (inputs[2] >> 2) & 0b111

    if load {

        let address_miss = address != scratch_space[CURRENT_ADDRESS + offset]

        if outputs[0] != <Int> address_miss {

            set_error(`We are are accessing cache entry {offset} and the "Miss" output is supposed to be {<Int> address_miss}.`)
            return fail

        }

        if !address_miss {

            if outputs[1] != scratch_space[CURRENT_VALUE + offset] {

                set_error(`This was a cache hit on cache entry {offset}, and you are supposed to output the cached value: {scratch_space[CURRENT_VALUE + offset]}.`)
                return fail

            }

        } else {

            if outputs[1] != Z_STATE {

                set_error(`This was a cache miss, so "value" output should be Z.`)
                return fail

            }

        }

    }

    if store {

        scratch_space[CURRENT_ADDRESS + offset] = address
        scratch_space[CURRENT_VALUE + offset] = inputs[3]

    }

    if tick > 1000 {

        if get_delay_score() >= 60 {

            set_error(`Your solution is correct, but delay should be less than 60.`)
            return fail

        }

        return win

    }

}