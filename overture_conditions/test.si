def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {
    var condition = tick / 3
    var value = 0
    
    if tick % 3 == 0 {
        value = random(128)
    } elif tick % 3 == 1 {
        value = 128 + random(128)
    } elif tick % 3 == 2 {
        value = 0
    }
    if tick == 24 {
        value = 1
        condition = 1
    } elif tick == 25 {
        value = 2
        condition = 1
    } elif tick == 26 {
        value = 4
        condition = 1
    } elif tick == 27 {
        value = 8
        condition = 1
    } elif tick == 28 {
        value = 16
        condition = 1
    } elif tick == 29 {
        value = 32
        condition = 1
    } elif tick == 30 {
        value = 64
        condition = 1
    } elif tick == 31 {
        value = 128
        condition = 1
    }
    switch condition
        0 { set_custom_input_text("NEVER") }
        1 { set_custom_input_text("ALWAYS") }
        2 { set_custom_input_text("=0") }
        3 { set_custom_input_text("≠0") }
        4 { set_custom_input_text("<0") }
        5 { set_custom_input_text("≥0") }
        6 { set_custom_input_text("≤0") }
        7 { set_custom_input_text(">0") }
    
    inputs[0] = condition
    inputs[1] = value
}
def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {
    var expected = false
    
    if inputs[0] == 0 {
        expected = false
    } elif inputs[0] == 1 {
        expected = true
    } elif inputs[0] == 2 {
        expected = inputs[1] == 0
    } elif inputs[0] == 3 {
        expected = inputs[1] != 0
    } elif inputs[0] == 4 {
        expected = inputs[1] >= 128
    } elif inputs[0] == 5 {
        expected = inputs[1] < 128
    } elif inputs[0] == 6 {
        expected = inputs[1] > 128 || inputs[1] == 0
    } elif inputs[0] == 7 {
        expected = inputs[1] <= 128 && inputs[1] != 0
    }
    if expected {
        if outputs[0] == 0 {
            return fail
        }
    } else {
        if outputs[0] != 0 {
            return fail
        }
    }
    
    if tick == 31 {
        return win
    }
}