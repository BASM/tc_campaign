
const CURRENT_ADDRESS = 0
const CURRENT_VALUE = 8

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    let mode = random(3)

    inputs[0] = random(2)
    inputs[1] = <Int> (mode == 0)
    inputs[2] = <Int> (mode == 1)
    inputs[3] = random(0x1fff)
    inputs[4] = random(0xffff)

    if random(3) == 0 {

        inputs[3] = scratch_space[CURRENT_ADDRESS + random(8)]

    }

}


def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {

    if inputs[0] == 0 {

        if outputs[0] != Z_STATE {

            set_error(`Output Z for "Miss" when we are not enabled.`)
            return fail

        }

        if outputs[1] != Z_STATE {

            set_error(`Output Z for "Value" when we are not enabled.`)
            return fail

        }

        return pass

    }

    let load    = inputs[1] == 1
    let store   = inputs[2] == 1
    let address = inputs[3]

    if load {

        let address_miss = address != scratch_space[CURRENT_ADDRESS]

        if outputs[0] != <Int> address_miss {

            set_error(`The "Miss" output is supposed to be {<Int> address_miss}.`)
            return fail

        }

        if !address_miss {

            if outputs[1] != scratch_space[CURRENT_VALUE] {

                set_error(`You are supposed to output the cached value: {scratch_space[CURRENT_VALUE]}.`)
                return fail

            }

        } else {

            if outputs[1] != Z_STATE {

                set_error(`This was a cache miss, so "value" output should be Z.`)
                return fail

            }

        }

    }

    if store {

        scratch_space[CURRENT_ADDRESS] = address
        scratch_space[CURRENT_VALUE] = inputs[4]

    }

    if get_level_memory("address") != scratch_space[CURRENT_ADDRESS] {

        set_error(`Address should be {scratch_space[CURRENT_ADDRESS]}, not {get_level_memory("address")}.`)
        return fail

    }

    if get_level_memory("value") != scratch_space[CURRENT_VALUE] {

        set_error(`Value should be {scratch_space[CURRENT_VALUE]}, not {get_level_memory("value")}.`)
        return fail

    }

    set_address_text(`Stored address: {scratch_space[CURRENT_ADDRESS]}`)
    set_value_text(`Stored value: {scratch_space[CURRENT_VALUE]}`)

    if tick > 1000 {

        if get_delay_score() >= 60 {

            set_error(`Your solution is correct, but delay should be less than 60.`)
            return fail

        }

        return win

    }

}
