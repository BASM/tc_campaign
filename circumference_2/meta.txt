kind = architecture
title = "Calibrating Laser Cannons 2"
tests = 8
size = [-256, -256, 255, 255]
dialogue = [
  (alien_centered, "Remember our ship's laser cannons for shooting at asteroids?
Well - Their calibration circuit broke again."),
  (alien_centered, "This time not only the radius circuitry broke, but the whole calibration system.
A replacement for it would need to be able to calculate a series of formulas."),
  (info, "The formulas you will get are already transformed into Reverse Polish Notation.
RPN is a notation where first you state the operands, and the operator is after them, and not between like in standard infix notation.

Example in infix (standard) notation:
3 + (4 * 5)
The same formula in RPN:
3 4 5 * +"),
  (info, "When you encounter an operation, you take the 2 last operands you've encountered, calculate the result and store it instead of the operands and the operation"),
  (alien_centered, "Your computer will receive a formula in Reverse Polish Notation, and should return the result of evaluating that formula."),
]
default_isa_spec = `

[settings]
name = "Symphony"

[fields]

register
zr 000
r1 001
r2 010
r3 011
r4 100
r5 101
sp 110
flags 111

[instructions]

or %a(register), %b(register), %c(register)
01000001 0aaa0bbb 00000ccc 00000000
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(register)
01000000 0aaa0bbb 00000ccc 00000000
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(register)
01000011 0aaa0bbb 00000ccc 00000000
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(register)
01000010 0aaa0bbb 00000ccc 00000000
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(register)
01000100 0aaa0bbb 00000ccc 00000000
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(register)
01000101 0aaa0bbb 00000ccc 00000000
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(register)
01000110 0aaa0bbb 00000ccc 00000000
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(register)
01000111 0aaa0bbb 00000ccc 00000000
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(register)
01001000 0aaa0bbb 00000ccc 00000000
LSR %b and %c and store the result in %a.

cmp %a(register), %b(register)
01001001 01110aaa 00000bbb 00000000
Compares %a and %b and store the resulting flags in r6.


or %a(register), %b(register), %c(immediate)
01010001 0aaa0bbb cccccccc cccccccc
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(immediate)
01010000 0aaa0bbb cccccccc cccccccc
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(immediate)
01010011 0aaa0bbb cccccccc cccccccc
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(immediate)
01010010 0aaa0bbb cccccccc cccccccc
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(immediate)
01010100 0aaa0bbb cccccccc cccccccc
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(immediate)
01010101 0aaa0bbb cccccccc cccccccc
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(immediate)
01010110 0aaa0bbb cccccccc cccccccc
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(immediate)
01010111 0aaa0bbb cccccccc cccccccc
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(immediate)
01011000 0aaa0bbb cccccccc cccccccc
LSR %b and %c and store the result in %a.

cmp %a(register), %b(immediate)
01011001 01110aaa bbbbbbbb bbbbbbbb
Compares %a and %b and store the resulting flags in r6.


jmp %a(register)
10001000 00000111 00000aaa 00000000
Jump to %a

je %a(register)
10000001 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was 0 (reading flags from r6).

jne %a(register)
10001001 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was not 0 (reading flags from r6).


jb %a(register)
10000100 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was unsigned below than 0 (reading flags from r6).

jae %a(register)
10001100 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was unsigned above or equal to 0 (reading flags from r6).

jbe %a(register)
10000101 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was unsigned below than or equal to 0 (reading flags from r6).

ja %a(register)
10001101 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was unsigned above 0 (reading flags from r6).


jl %a(register)
10000010 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was signed less than 0 (reading flags from r6).

jge %a(register)
10001010 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was signed greater than or equal to 0 (reading flags from r6).

jle %a(register)
10000011 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was signed less than or equal to 0 (reading flags from r6).

jg %a(register)
10001011 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was signed greater than 0 (reading flags from r6).


jmp %a(immediate | label)
10011000 00000111 aaaaaaaa aaaaaaaa
Jump to %a

je %a(immediate | label)
10010001 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was 0 (reading flags from r6).

jne %a(immediate | label)
10011001 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was not 0 (reading flags from r6).


jb %a(immediate | label)
10010010 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was unsigned below than 0 (reading flags from r6).

jae %a(immediate | label)
10011010 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was unsigned above or equal to 0 (reading flags from r6).

jbe %a(immediate | label)
10010011 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was unsigned below than or equal to 0 (reading flags from r6).

ja %a(immediate | label)
10011011 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was unsigned above 0 (reading flags from r6).


jl %a(immediate | label)
10010100 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was signed less than 0 (reading flags from r6).

jge %a(immediate | label)
10011100 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was signed greater than or equal to 0 (reading flags from r6).

jle %a(immediate | label)
10010101 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was signed less than or equal to 0 (reading flags from r6).

jg %a(immediate | label)
10011101 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was signed greater than 0 (reading flags from r6).

in %a(register)
00000001 0aaa0000 00000000 00000000
Loads an input and stores it in %a

out %a(register)
00000010 00000000 00000aaa 00000000
Sends %a to output

out %a(immediate)
00010010 00000000 aaaaaaaa aaaaaaaa
Sends %a to output

keyboard %a(register)
00001001 0aaa0000 00000000 00000000
Loads keyboard input and stores it to %a

console %a(register)
00000011 00000000 00000aaa 00000000
Stores the value of %a in the console offset register

console %a(immediate)
00010011 00000000 00000aaa 00000000
Stores the value of %a in the console offset register

time_0 %a(register)
00000100 0aaa0000 00000000 00000000
Loads the first two bytes of the time value and stores it to %a

time_1 %a(register)
00000101 0aaa0000 00000000 00000000
Loads the second two bytes of the time value and stores it to %a

time_2 %a(register)
00000110 0aaa0000 00000000 00000000
Loads the third two bytes of the time value and stores it to %a

time_3 %a(register)
00000111 0aaa0000 00000000 00000000
Loads the fourth two bytes of the time value and stores it to %a

counter %a(register)
00001000 0aaa0000 00000000 00000000
Loads the counter value and stores it to %a


load %dest(register), [%address(register)]
11000000 0ddd0000 00000aaa 00000000
Loads %address from RAM and stores it to %dest

store [%address(register)], %value(register)
11000001 00000vvv 00000aaa 00000000
Store %value to %address in RAM

load %dest(register), [%address(immediate)]
11010000 0ddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store [%address(immediate)], %value(register)
11010001 00000vvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM



nop
00000000 00000000 00000000 00000000
Does nothing

nop
00000000 00000000 00000000 00000000
Does nothing

mov %a(register), %b(register)
01000001 0aaa0bbb 00000000 00000000
Move from %a to %b

neg %a(register), %b(register)
01000101 0aaa0000 00000bbb 00000000
Neg %b and store the result in %a.

not %a(register), %b(register)
01000011 0aaa0000 00000bbb 00000000
Not %b and store the result in %a.

mov %a(register), %b(immediate)
01010001 0aaa0000 bbbbbbbb bbbbbbbb
Move from %a to %b

neg %a(register), %b(immediate)
01010101 0aaa0000 bbbbbbbb bbbbbbbb
Neg %b and store the result in %a.

not %a(register), %b(immediate)
01010011 0aaa0000 bbbbbbbb bbbbbbbb
Not %b and store the result in %a.

push %a(register)
01010101 01100110 00000000 00000010   11000001 00000aaa 00000110 00000000
Pushes %a on to the stack. This instruction is a synonym for:   sub sp, sp, 2   store [sp], %a

pop %a(register)
11000000 0aaa0000 00000110 00000000   01010100 01100110 00000000 00000010
Pops %a off the stack. This instruction is a synonym for:   load %a, [sp]   add sp, sp, 2

call %a(label)
00001000 01110000 00000000 00000000   01010100 01110111 00000000 00010100   01010101 01100110 00000000 00000010   11000001 00000111 00000110 00000000   10011000 00000111 aaaaaaaa aaaaaaaa
Calls %a. Overwrites the flag register. This instruction is a synonym for:   counter flags   add flags, flags, 20   sub sp, sp, 2   store [sp], flags   jmp %a

ret
11000000 01110000 00000110 00000000   01010100 01100110 00000000 00000010   10001000 00000111 00000111 00000000
Returns from the last function call. Overwrites the flag register. This instruction is a synonym for:   load flags, [sp]   add sp, sp, 2   jmp flags
`
