
const RAM_IS_BUSY    = 0
const DEST           = 1
const LAST_WAS_STORE = 2

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    let destination = random(8)

    inputs[0] = 0 // load
    inputs[1] = 0 // store
    inputs[2] = 0 // ram ready
    inputs[3] = destination
    inputs[4] = random(0xffff) // result_value

    let is_busy = scratch_space[RAM_IS_BUSY] == 1

    if !is_busy {

        if random(4) == 0 {

            let store = random(2)
            inputs[0] = 1 - store
            inputs[1] = store
            scratch_space[RAM_IS_BUSY] = 1
            scratch_space[LAST_WAS_STORE] = store

        }

    } else {

        let stop = random(5)
        
        if stop == 0 {
        
            scratch_space[RAM_IS_BUSY] = 0
            inputs[2] = 1
        
        }

    }

}

def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {

    let load         = inputs[0]
    let store        = inputs[1]
    let ram_ready    = inputs[2]
    let dest         = inputs[3]
    let result_value = inputs[4]

    if outputs[0] != inputs[0] {

        set_error(`The "Load" output should always be the same as the load input.`)
        return fail

    }

    if outputs[1] != inputs[1] {

        set_error(`The "Store" output should always be the same as the store input.`)
        return fail

    }


    if outputs[2] != ram_ready {

        set_error(`"Ram ready" should always be the same as the input.`)
        return fail

    }

    if outputs[3] != scratch_space[DEST] {

        set_error(`"Destination" should be {scratch_space[DEST]}.`)
        return fail

    }

    if scratch_space[LAST_WAS_STORE] == 0 && ram_ready == 1 {

        if outputs[4] != inputs[4] {

            set_error(`We just finished a load instruction, so "Result value" output should be the same as the result value input.`)
            return fail

        }

    } elif outputs[4] != Z_STATE {

        set_error(`Result value should always be Z, unless we just finished a load.`)
        return fail

    }

    if load == 1 || store == 1 {

        scratch_space[DEST] = dest

    }


    if tick >= 0xffff {

        return win

    }

}

