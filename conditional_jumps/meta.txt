kind = architecture
title = "Conditional Jumps"
tests = 42
size = [-256, -256, 255, 255]
no_score = true
dialogue = [
  (info, "Read the input until you see the number 37. 

Then output a count of how many times you read the input."),
  (info, `To complete this level you need to use jumps. 

A jump is an instruction that overwrites the counter. 

Overwriting the counter means we "jump" to an instruction somewhere else in our program, instead of just proceeding to the next.`),
  (info, `Note: If you use a fixed number for where you jump to, you have to update it every time you add or remove code above the jump destination. 

Instead you can use a feature called a "label" to mark a location in the program that automatically updates when you change anything, like so:

my_label:         ; This is a label
load my_label  ; Load the offset of the label
  `),
]
default_assembly = `
load 5 ; Moves 5 to r0
jmp   ; Jumps to byte 5 of the program

; <- Click Assembly to see the other jump instructions

my_label:     ; This is a label
load my_label ; You can load it's offset like this

`