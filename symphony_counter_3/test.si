
const MEMORY = 0


def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    scratch_space[MEMORY] = scratch_space[MEMORY]

    let store = random(2)
    let value = random(0xfff) << 2
    let inc   = random(3)

    inputs[0] = store
    inputs[1] = value
    inputs[2] = <Int> (inc > 0)
    inputs[3] = inc >> 1

}


def check_output($scratch_space: [Int], tick: Int, inputs: [Int], outputs: [Int]) TestResult {

    if outputs[0] == Z_STATE {

        set_error(`Output should never be Z`)
        return fail

    }

    if outputs[0] != scratch_space[MEMORY] {

        set_error(`Output should be {scratch_space[MEMORY]}`)
        return fail

    }

    if inputs[0] == 1 {

        scratch_space[MEMORY] = inputs[1]

    } else {

        scratch_space[MEMORY] += inputs[2] * 4 + inputs[3] * 4

    }

    if get_probe_value() != scratch_space[MEMORY] {

        let memory_value = get_probe_value()

        if memory_value == Z_STATE {

            set_error(`Link the memory probe to a component`)
            return fail

        }

        set_error(`Counter value is supposed to be {scratch_space[MEMORY]}, not {get_probe_value()}`)
        return fail

    }

    if tick == 0xffff {

        if get_delay_score() >= 35 {

            set_error(`Your solution is correct, but delay in this level should be 35 or less.`)
            return fail

        }

        return win

    }

}