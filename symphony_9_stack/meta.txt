kind = sequential
title = "Stack"
size = [-256, -256, 255, 255]
immutable_spec = true
copy_solution_to_level = ["symphony_10_functions"]
no_score = true
dialogue = [
    (info, `The challenge of this level is to implement a common programming structure called a "stack". You are supposed to do this in assembly. You can do two things with a stack:

[code]PUSH[/code] - Adds a number to the stack
[code]POP[/code] - Removes the last added value from the stack

You can think of the stack data structure like a physical stack of plates in a busy restaurant. The dishwasher pushes plates on top of the stack and the chef pops them off.

Read the input in this level to get the next operation. 
A non-0 input is a push, in this case store the value so it can be popped later. 
A 0 value is pop, remove and output the last number you stored.
`),
]
post_mortem = [
  (alien, `Since the stack is so useful for programming, a "push" and "pop" instruction will be added to the next Symphony level. Both of these are synonyms for two other instructions and they both use the "sp" register (short for stack pointer) to keep track of the stack.

"push" is a synonym for:
[code]sub sp, sp, 2
store [sp], %a[/code]

"pop" is a synonym for:
[code]load %a, [sp]
add sp, sp, 2[/code]

You may notice that "push" subtracts from "sp" so that the stack grows downwards from the high addresses. This leaves the low addresses for you to use as you see fit.
  `)
]
default_isa_spec = `
[settings]
name = "Symphony"

[fields]

register
zr 000
r1 001
r2 010
r3 011
r4 100
r5 101
sp 110
flags 111

[instructions]

or %a(register), %b(register), %c(register)
01000001 0aaa0bbb 00000ccc 00000000
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(register)
01000000 0aaa0bbb 00000ccc 00000000
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(register)
01000011 0aaa0bbb 00000ccc 00000000
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(register)
01000010 0aaa0bbb 00000ccc 00000000
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(register)
01000100 0aaa0bbb 00000ccc 00000000
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(register)
01000101 0aaa0bbb 00000ccc 00000000
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(register)
01000110 0aaa0bbb 00000ccc 00000000
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(register)
01000111 0aaa0bbb 00000ccc 00000000
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(register)
01001000 0aaa0bbb 00000ccc 00000000
LSR %b and %c and store the result in %a.

cmp %a(register), %b(register)
01001001 01110aaa 00000bbb 00000000
Compares %a and %b and store the resulting flags in r6.


or %a(register), %b(register), %c(immediate)
01010001 0aaa0bbb cccccccc cccccccc
OR %b and %c and store the result in %a.

nand %a(register), %b(register), %c(immediate)
01010000 0aaa0bbb cccccccc cccccccc
NAND %b and %c and store the result in %a.

nor %a(register), %b(register), %c(immediate)
01010011 0aaa0bbb cccccccc cccccccc
NOR %b and %c and store the result in %a.

and %a(register), %b(register), %c(immediate)
01010010 0aaa0bbb cccccccc cccccccc
AND %b and %c and store the result in %a.

add %a(register), %b(register), %c(immediate)
01010100 0aaa0bbb cccccccc cccccccc
ADD %b and %c and store the result in %a.

sub %a(register), %b(register), %c(immediate)
01010101 0aaa0bbb cccccccc cccccccc
SUB %b and %c and store the result in %a.

xor %a(register), %b(register), %c(immediate)
01010110 0aaa0bbb cccccccc cccccccc
XOR %b and %c and store the result in %a.

lsl %a(register), %b(register), %c(immediate)
01010111 0aaa0bbb cccccccc cccccccc
LSL %b and %c and store the result in %a.

lsr %a(register), %b(register), %c(immediate)
01011000 0aaa0bbb cccccccc cccccccc
LSR %b and %c and store the result in %a.

cmp %a(register), %b(immediate)
01011001 01110aaa bbbbbbbb bbbbbbbb
Compares %a and %b and store the resulting flags in r6.


jmp %a(register)
10001000 00000111 00000aaa 00000000
Jump to %a

je %a(register)
10000001 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was 0 (reading flags from r6).

jne %a(register)
10001001 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was not 0 (reading flags from r6).


jb %a(register)
10000100 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was unsigned below than 0 (reading flags from r6).

jae %a(register)
10001100 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was unsigned above or equal to 0 (reading flags from r6).

jbe %a(register)
10000101 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was unsigned below than or equal to 0 (reading flags from r6).

ja %a(register)
10001101 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was unsigned above 0 (reading flags from r6).


jl %a(register)
10000010 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was signed less than 0 (reading flags from r6).

jge %a(register)
10001010 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was signed greater than or equal to 0 (reading flags from r6).

jle %a(register)
10000011 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was signed less than or equal to 0 (reading flags from r6).

jg %a(register)
10001011 00000111 00000aaa 00000000
Jump to %a if the result of the last compare was signed greater than 0 (reading flags from r6).


jmp %a(immediate | label)
10011000 00000111 aaaaaaaa aaaaaaaa
Jump to %a

je %a(immediate | label)
10010001 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was 0 (reading flags from r6).

jne %a(immediate | label)
10011001 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was not 0 (reading flags from r6).


jb %a(immediate | label)
10010010 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was unsigned below than 0 (reading flags from r6).

jae %a(immediate | label)
10011010 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was unsigned above or equal to 0 (reading flags from r6).

jbe %a(immediate | label)
10010011 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was unsigned below than or equal to 0 (reading flags from r6).

ja %a(immediate | label)
10011011 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was unsigned above 0 (reading flags from r6).


jl %a(immediate | label)
10010100 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was signed less than 0 (reading flags from r6).

jge %a(immediate | label)
10011100 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was signed greater than or equal to 0 (reading flags from r6).

jle %a(immediate | label)
10010101 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was signed less than or equal to 0 (reading flags from r6).

jg %a(immediate | label)
10011101 00000111 aaaaaaaa aaaaaaaa
Jump to %a if the result of the last compare was signed greater than 0 (reading flags from r6).

in %a(register)
00000001 0aaa0000 00000000 00000000
Loads an input and stores it in %a

out %a(register)
00000010 00000000 00000aaa 00000000
Sends %a to output

keyboard %a(register)
00001001 0aaa0000 00000000 00000000
Loads keyboard input and stores it to %a

console %a(register)
00000011 00000000 00000aaa 00000000
Stores the value of %a in the console offset register

console %a(immediate)
00010011 00000000 00000aaa 00000000
Stores the value of %a in the console offset register

time_0 %a(register)
00000100 0aaa0000 00000000 00000000
Loads the first two bytes of the time value and stores it to %a

time_1 %a(register)
00000101 0aaa0000 00000000 00000000
Loads the second two bytes of the time value and stores it to %a

time_2 %a(register)
00000110 0aaa0000 00000000 00000000
Loads the third two bytes of the time value and stores it to %a

time_3 %a(register)
00000111 0aaa0000 00000000 00000000
Loads the fourth two bytes of the time value and stores it to %a

counter %a(register)
00001000 0aaa0000 00000000 00000000
Loads the counter value and stores it to %a


load %dest(register), [%address(register)]
11000000 0ddd0000 00000aaa 00000000
Loads %address from RAM and stores it to %dest

store [%address(register)], %value(register)
11000001 00000vvv 00000aaa 00000000
Store %value to %address in RAM

load %dest(register), [%address(immediate)]
11010000 0ddd0000 aaaaaaaa aaaaaaaa
Loads %address from RAM and stores it to %dest

store [%address(immediate)], %value(register)
11010001 00000vvv aaaaaaaa aaaaaaaa
Store %value to %address in RAM



nop
00000000 00000000 00000000 00000000
Does nothing

mov %a(register), %b(register)
01000001 0aaa0bbb 00000000 00000000
Move from %a to %b

neg %a(register), %b(register)
01000101 0aaa0000 00000bbb 00000000
Neg %b and store the result in %a.

not %a(register), %b(register)
01000011 0aaa0000 00000bbb 00000000
Not %b and store the result in %a.

mov %a(register), %b(immediate)
01010001 0aaa0000 bbbbbbbb bbbbbbbb
Move from %a to %b

neg %a(register), %b(immediate)
01010101 0aaa0000 bbbbbbbb bbbbbbbb
Neg %b and store the result in %a.

not %a(register), %b(immediate)
01010011 0aaa0000 bbbbbbbb bbbbbbbb
Not %b and store the result in %a.

nop
00000000 00000000 00000000 00000000
Does nothing

`
